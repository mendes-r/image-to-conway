plugins {
    id 'java'
    id "org.springframework.boot" version "2.0.1.RELEASE"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.palantir.docker" version "0.22.1"
    id 'jacoco'
    id "org.sonarqube" version "3.3"
}

group = 'image.to.conway'
version = '0.2.0'
description = 'image-to-conway'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.6'
    // Test Spring Boot + JUnit 5
    testCompile('org.springframework.boot:spring-boot-starter-test:2.6.6')
    testCompile('org.junit.jupiter:junit-jupiter:5.8.2')
    // AWS
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.196'
    // implementation 'io.awspring.cloud:spring-cloud-aws-dependencies:2.4.0'
    // others
    implementation 'com.github.loki4j:loki-logback-appender:1.3.2'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml {
            enabled true
        }
        csv {
            enabled false
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "admin"
        property "sonar.password", "admin"

        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"

        property "sonar.exclusions", ["src/test/*"]

        property "sonar.issue.ignore.multicriteria", "e1"
        // declare local variable with "var" instead.
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "java:S6212"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", "**/*.java"
    }
}

clean.doFirst {
    delete "logs"
    delete "out"
    delete "docker/local/.localstack"
    delete fileTree('src/test/resources/results/') {
        include '**/*.jpg'
        include '**/*.png'
        include '**/*.gif'
    }
}

task integrationTests(type: Test) {
    useJUnitPlatform() {
        includeTags("IntegrationTests")
    }
}

task unitTests(type: Test) {
    useJUnitPlatform() {
        includeTags("UnitTests")
    }
}

docker {
    name "${project.name}:${project.version}"
    dockerfile file('./docker/Dockerfile')
    files './docker/entrypoint.sh', "./build/libs/${project.name}-${project.version}.jar"
    noCache true
}